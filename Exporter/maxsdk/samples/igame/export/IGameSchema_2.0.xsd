<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2005 rel. 3 U (http://www.altova.com) by Steve Anderson (Autodesk, Inc) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:maxxml" targetNamespace="urn:maxxml" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="IGame">
		<xs:complexType>
			<xs:sequence minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="SceneInfo"/>
				<xs:element ref="MaterialList"/>
				<xs:element ref="Node" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="Date"/>
			<xs:attribute name="Version" use="required" fixed="2.0"/>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="CoordSys">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="directx"/>
			<xs:enumeration value="opengl"/>
			<xs:enumeration value="3dsmax"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RotationFormat">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Quaternion"/>
			<xs:enumeration value="AngleAxis"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MapType">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Texture"/>
			<xs:enumeration value="VertexColor"/>
			<xs:enumeration value="Other"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NodeType">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Mesh"/>
			<xs:enumeration value="Helper"/>
			<xs:enumeration value="Light"/>
			<xs:enumeration value="Bone"/>
			<xs:enumeration value="Camera"/>
			<xs:enumeration value="Spline"/>
			<xs:enumeration value="IKChain"/>
			<xs:enumeration value="Group"/>
			<xs:enumeration value="Other"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FloatList">
		<xs:list itemType="xs:double"/>
	</xs:simpleType>
	<xs:simpleType name="IntList">
		<xs:list itemType="xs:nonNegativeInteger"/>
	</xs:simpleType>
	<xs:simpleType name="HexColor">
		<xs:restriction base="xs:hexBinary">
			<xs:minLength value="3"/>
			<xs:maxLength value="4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BitList">
		<xs:list itemType="xs:boolean"/>
	</xs:simpleType>
	<xs:simpleType name="Float2">
		<xs:restriction base="FloatList">
			<xs:minLength value="2"/>
			<xs:maxLength value="2"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Float3">
		<xs:restriction base="FloatList">
			<xs:minLength value="3"/>
			<xs:maxLength value="3"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Int3">
		<xs:restriction base="IntList">
			<xs:length value="3"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Int2">
		<xs:restriction base="IntList">
			<xs:length value="2"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Dimension">
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="2"/>
			<xs:maxInclusive value="4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="either3or4">
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="3"/>
			<xs:maxInclusive value="4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Float4">
		<xs:restriction base="FloatList">
			<xs:minLength value="4"/>
			<xs:maxLength value="4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Color">
		<xs:restriction base="FloatList">
			<xs:minLength value="3"/>
			<xs:maxLength value="4"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SkinType">
		<xs:restriction base="xs:NMTOKENS">
			<xs:enumeration value="Blended"/>
			<xs:enumeration value="SkewMod"/>
			<xs:enumeration value="Rigid"/>
			<xs:enumeration value="Other"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="LightType">
		<xs:restriction base="xs:NMTOKENS">
			<xs:enumeration value="Omni"/>
			<xs:enumeration value="Targeted"/>
			<xs:enumeration value="Free"/>
			<xs:enumeration value="TargetedDirectional"/>
			<xs:enumeration value="Directional"/>
			<xs:enumeration value="Other"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Float7">
		<xs:restriction base="FloatList">
			<xs:minLength value="7"/>
			<xs:maxLength value="7"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Float12">
		<xs:restriction base="FloatList">
			<xs:minLength value="12"/>
			<xs:maxLength value="12"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MaterialClass">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Advanced Lighting Override"/>
			<xs:enumeration value="Architectural"/>
			<xs:enumeration value="Blend"/>
			<xs:enumeration value="Composite"/>
			<xs:enumeration value="DirectX 9 Shader"/>
			<xs:enumeration value="Double Sided"/>
			<xs:enumeration value="Ink 'n Paint"/>
			<xs:enumeration value="Lightscape"/>
			<xs:enumeration value="Matte/Shadow"/>
			<xs:enumeration value="Morpher"/>
			<xs:enumeration value="Multi/Sub-Object"/>
			<xs:enumeration value="Raytrace"/>
			<xs:enumeration value="Shell"/>
			<xs:enumeration value="Shellac"/>
			<xs:enumeration value="Standard"/>
			<xs:enumeration value="Top/Bottom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TextureMapSlot">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Diffuse"/>
			<xs:enumeration value="Ambient"/>
			<xs:enumeration value="Specular"/>
			<xs:enumeration value="SpecularLevel"/>
			<xs:enumeration value="Opacity"/>
			<xs:enumeration value="Glossiness"/>
			<xs:enumeration value="SelfIllumination"/>
			<xs:enumeration value="Filter"/>
			<xs:enumeration value="Bump"/>
			<xs:enumeration value="Reflection"/>
			<xs:enumeration value="Refraction"/>
			<xs:enumeration value="Displacement"/>
			<xs:enumeration value="Unknown"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TextureAddress">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Clamp"/>
			<xs:enumeration value="Mirror"/>
			<xs:enumeration value="Tile"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TextureCoordinateSource">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="TextureChannel"/>
			<xs:enumeration value="VertexColorChannel"/>
			<xs:enumeration value="ObjectCoordinates"/>
			<xs:enumeration value="WorldCoordinates"/>
			<xs:enumeration value="Screen"/>
			<xs:enumeration value="SphericalEnvironment"/>
			<xs:enumeration value="CylindricalEnvironment"/>
			<xs:enumeration value="ShrinkwrapEnvironment"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BitmapProperty">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="ClipH"/>
			<xs:enumeration value="ClipU"/>
			<xs:enumeration value="ClipV"/>
			<xs:enumeration value="ClipW"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="SceneInfo">
		<xs:complexType>
			<xs:attribute name="ObjectSpace" type="xs:boolean" use="required"/>
			<xs:attribute name="RotationFormat" type="RotationFormat" use="required"/>
			<xs:attribute name="FileName" type="xs:string" use="optional"/>
			<xs:attribute name="StartFrame" type="xs:integer" use="required"/>
			<xs:attribute name="EndFrame" type="xs:integer" use="required"/>
			<xs:attribute name="FrameRate" type="xs:double" use="required"/>
			<xs:attribute name="TicksPerFrame" type="xs:integer" use="required"/>
			<xs:attribute name="CoordinateSystem" type="CoordSys" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="MaterialList">
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="Material" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Material">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Diffuse" type="AnimatableColor" minOccurs="0"/>
				<xs:element name="Ambient" type="AnimatableColor" minOccurs="0"/>
				<xs:element name="Specular" type="AnimatableColor" minOccurs="0"/>
				<xs:element name="Glossiness" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="Opacity" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="SpecularLevel" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="SelfIllumination" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="SpecularSoftening" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="TextureMaps" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Texture" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="MapStrength" type="AnimatableFloat" minOccurs="0"/>
										<xs:element name="MapOffset" type="AnimatablePoint" minOccurs="0"/>
										<xs:element name="MapTile" type="AnimatablePoint" minOccurs="0"/>
										<xs:element name="MapRotation" type="AnimatablePoint" minOccurs="0">
											<xs:annotation>
												<xs:documentation>
											Texture map rotation is not expressed in quat or angle-axis; it's always an Euler XYZ format,
											to match the Max UI.
											</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="Blur" type="AnimatableFloat" minOccurs="0"/>
										<xs:element name="BlurOffset" type="AnimatableFloat" minOccurs="0"/>
										<xs:element name="BitmapTexture" minOccurs="0">
											<xs:complexType>
												<xs:sequence>
													<xs:element name="ClipU" type="AnimatableFloat" minOccurs="0"/>
													<xs:element name="ClipV" type="AnimatableFloat" minOccurs="0"/>
													<xs:element name="ClipW" type="AnimatableFloat" minOccurs="0"/>
													<xs:element name="ClipH" type="AnimatableFloat" minOccurs="0"/>
												</xs:sequence>
												<xs:attribute name="Filename" type="xs:anyURI" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
									<xs:attribute name="Slot" type="TextureMapSlot" use="required"/>
									<xs:attribute name="Name" type="xs:string" use="required"/>
									<xs:attribute name="Index" type="xs:nonNegativeInteger" use="required"/>
									<xs:attribute name="Source" type="TextureCoordinateSource"/>
									<xs:attribute name="UAddress" type="TextureAddress"/>
									<xs:attribute name="VAddress" type="TextureAddress"/>
									<xs:attribute name="WAddress" type="TextureAddress"/>
									<xs:attribute name="MapChannel" type="xs:integer"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="SubMaterials" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="Material" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="Index" type="xs:nonNegativeInteger" use="required"/>
			<xs:attribute name="MaterialID" type="xs:nonNegativeInteger" use="optional" />
			<xs:attribute name="Name" type="xs:string" use="required"/>
			<xs:attribute name="Class" type="MaterialClass" use="required"/>
			<xs:attribute name="RefIndex" type="xs:nonNegativeInteger" use="optional"/>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="Node">
		<xs:sequence minOccurs="0" maxOccurs="unbounded">
			<xs:element ref="NodeTM"/>
			<xs:element ref="Mesh" minOccurs="0"/>
			<xs:element ref="IKChain" minOccurs="0"/>
			<xs:element ref="Camera" minOccurs="0"/>
			<xs:element ref="Light" minOccurs="0"/>
			<xs:element ref="TMController" minOccurs="0"/>
			<xs:element ref="Modifiers" minOccurs="0"/>
			<xs:element ref="Node" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="Name" type="xs:string" use="required"/>
		<xs:attribute name="NodeID" type="xs:nonNegativeInteger" use="required"/>
		<xs:attribute name="NodeType" type="NodeType" use="required"/>
		<xs:attribute name="ParentID" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="NumChildren" type="xs:nonNegativeInteger"/>
		<xs:attribute name="XRef" type="xs:anyURI" use="optional"/>
		<xs:attribute name="MaterialIndex" type="xs:nonNegativeInteger" use="optional"/>
		<xs:attribute name="WireframeColor" type="HexColor" use="optional"/>
	</xs:complexType>
	<xs:element name="Node" type="Node"/>
	<xs:element name="NodeTM">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Translation" type="Float3"/>
				<xs:element name="Rotation" type="Float4"/>
				<xs:element name="Scale" type="Float7"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="Spline"/>
	<xs:element name="IKChain"/>
	<xs:complexType name="AnimatableFloat">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="BezierFloatController"/>
				<xs:element ref="CustomFloatController"/>
			</xs:choice>
			<xs:element ref="FloatSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="xs:float" use="required"/>
	</xs:complexType>
	<xs:element name="Camera">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="FOV" type="AnimatableFloat"/>
				<xs:element name="FarClip" type="AnimatableFloat"/>
				<xs:element name="NearClip" type="AnimatableFloat"/>
				<xs:element name="TargetDistance" type="AnimatableFloat"/>
			</xs:sequence>
			<xs:attribute name="TargetID" type="xs:nonNegativeInteger"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Mesh">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Vertices">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="FloatList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required"/>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="VertexSelection" minOccurs="0">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="BitList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required">
									<xs:annotation>
										<xs:documentation>Should be the same as the Count for the "Vertices" element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="VertexHide" minOccurs="0">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="BitList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required">
									<xs:annotation>
										<xs:documentation>Should be the same as the Count for the "Vertices" element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="Normals" minOccurs="0">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="FloatList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required"/>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="VertexWeights" minOccurs="0">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="FloatList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required">
									<xs:annotation>
										<xs:documentation>Should be the same as the Count for the "Vertices" element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="SoftSelection" minOccurs="0">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="FloatList">
								<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required">
									<xs:annotation>
										<xs:documentation>Should be the same as the Count for the "Vertices" element.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="url" type="xs:anyURI"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="Faces" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Faces consist of a bunch of different data arrays, contained as subelements.
						The count for all of these subarrays is the same, and is expressed as the "Count" attribute for the "Faces" element.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FaceVertices">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="IntList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="FaceNormals" minOccurs="0">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="IntList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="MaterialIDs" minOccurs="0">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="IntList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="SmoothingGroups" minOccurs="0">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="IntList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="FaceSelection" minOccurs="0">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="BitList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="FaceHide" minOccurs="0">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="BitList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="EdgeSelection" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Contains 3*Count bits which indicate selection.  (Edges are indexed as face*3+side.)</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="BitList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="EdgeVisibility" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Contains 3*Count bits which indicate edge visibility.
									This information is often used to determine which edges are polygon edges, versus the ones that are "diagonals".</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="BitList">
											<xs:attribute name="url" type="xs:anyURI"/>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="MaterialID" type="xs:nonNegativeInteger" use="optional">
							<xs:annotation>
								<xs:documentation>Optional attribute used to indicate a single material ID used for all faces</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="SmoothingGroup" type="xs:integer" use="optional">
							<xs:annotation>
								<xs:documentation>Optional attribute used to indicate a single smoothing group used for all faces</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="MapChannels" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="MapChannel" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="MapVertices">
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="FloatList">
														<xs:attribute name="Count" type="xs:nonNegativeInteger" use="required"/>
														<xs:attribute name="Dimension" type="Dimension" use="required"/>
														<xs:attribute name="url" type="xs:anyURI"/>
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="MapFaces" minOccurs="0">
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="IntList">
														<xs:attribute name="Count" use="required"/>
														<xs:attribute name="url"/>
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
									<xs:attribute name="Name" type="xs:string" use="optional"/>
									<xs:attribute name="ID" type="xs:integer" use="required"/>
									<xs:attribute name="Type" type="MapType" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="TMController" type="AnimatableMatrix"/>
	<xs:complexType name="AnimatableMatrix">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="PRSController"/>
				<xs:element ref="CustomMatrixController"/>
			</xs:choice>
			<xs:element ref="MatrixSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="Float12"/>
	</xs:complexType>
	<xs:element name="PRSController">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Position" type="AnimatablePoint" minOccurs="0"/>
				<xs:element name="Rotation" type="AnimatableRotation" minOccurs="0"/>
				<xs:element name="Scale" type="AnimatableScale" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="LookAtConstraint">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Target" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="RefID" type="xs:integer" use="required"/>
						<xs:attribute name="Weight" type="xs:float"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="LookAtAxis" type="AnimatablePoint"/>
				<xs:element name="UpVector" type="AnimatablePoint"/>
				<xs:element name="UpWorld" type="AnimatablePoint"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="AnimatablePoint">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="PositionXYZController"/>
				<xs:element ref="CustomPositionController"/>
			</xs:choice>
			<xs:element ref="PointSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="Float3" use="required"/>
	</xs:complexType>
	<xs:complexType name="AnimatableRotation">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="EulerXYZController"/>
				<xs:element ref="LookAtConstraint"/>
				<xs:element ref="CustomRotationController"/>
			</xs:choice>
			<xs:element ref="RotationSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="Float4" use="required"/>
	</xs:complexType>
	<xs:complexType name="AnimatableScale">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="ScaleXYZController"/>
				<xs:element ref="CustomScaleController"/>
			</xs:choice>
			<xs:element ref="ScaleSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="Float7" use="required"/>
	</xs:complexType>
	<xs:complexType name="AnimatableColor">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element ref="PositionXYZController"/>
				<xs:element ref="CustomPositionController"/>
				<xs:element ref="CustomColorController"/>
			</xs:choice>
			<xs:element ref="ColorSample" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="Value" type="Color" use="required"/>
	</xs:complexType>
	<xs:element name="PositionXYZController">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="X" type="AnimatableFloat"/>
				<xs:element name="Y" type="AnimatableFloat"/>
				<xs:element name="Z" type="AnimatableFloat"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="EulerXYZController">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="X" type="AnimatableFloat"/>
				<xs:element name="Y" type="AnimatableFloat"/>
				<xs:element name="Z" type="AnimatableFloat"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ScaleXYZController">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="X" type="AnimatableFloat"/>
				<xs:element name="Y" type="AnimatableFloat"/>
				<xs:element name="Z" type="AnimatableFloat"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="TangentType">
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="Smooth"/>
			<xs:enumeration value="Linear"/>
			<xs:enumeration value="Step"/>
			<xs:enumeration value="Auto"/>
			<xs:enumeration value="Custom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="BezierFloatController">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Key" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="time" type="xs:integer" use="required"/>
						<xs:attribute name="value" type="xs:float" use="required"/>
						<xs:attribute name="xBroken" type="xs:boolean"/>
						<xs:attribute name="yBroken" type="xs:boolean"/>
						<xs:attribute name="zBroken" type="xs:boolean"/>
						<xs:attribute name="wBroken" type="xs:boolean"/>
						<xs:attribute name="constVelocity" type="xs:boolean"/>
						<xs:attribute name="unconstrainHandle" type="xs:boolean"/>
						<xs:attribute name="inTanType" type="TangentType"/>
						<xs:attribute name="outTanType" type="TangentType"/>
						<xs:attribute name="inTanVal" type="xs:float"/>
						<xs:attribute name="outTanVal" type="xs:float"/>
						<xs:attribute name="inLen" type="xs:float"/>
						<xs:attribute name="outLen" type="xs:float"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="count" type="xs:integer" use="required"/>
			<xs:attribute name="xBroken" type="xs:boolean" default="false"/>
			<xs:attribute name="yBroken" type="xs:boolean" default="false"/>
			<xs:attribute name="zBroken" type="xs:boolean" default="false"/>
			<xs:attribute name="wBroken" type="xs:boolean" default="false"/>
			<xs:attribute name="constVelocity" type="xs:boolean"/>
			<xs:attribute name="unconstrainHandle" type="xs:boolean"/>
			<xs:attribute name="inTanType" type="TangentType"/>
			<xs:attribute name="outTanType" type="TangentType"/>
			<xs:attribute name="inLen" type="xs:double"/>
			<xs:attribute name="outLen" type="xs:double"/>
		</xs:complexType>
	</xs:element>
	<!-- TODO: Create type for custom controllers, which provides at minimum an ID attribute
		 or something people can use to uniquely identify their controller -->
	<xs:complexType name="CustomController">
		<xs:attribute name="ClassID" type="xs:integer"/>
		<xs:attribute name="SuperClassID" type="xs:integer"/>
		<xs:anyAttribute/>
	</xs:complexType>
	<xs:element name="CustomMatrixController"/>
	<xs:element name="CustomPositionController"/>
	<xs:element name="CustomColorController"/>
	<xs:element name="CustomRotationController"/>
	<xs:element name="CustomScaleController"/>
	<xs:element name="CustomFloatController"/>
	<xs:complexType name="SampleData">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Times" type="IntList"/>
				<xs:element name="Start_Interval" type="Int2"/>
			</xs:choice>
			<xs:element name="Values" type="FloatList"/>
		</xs:sequence>
		<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
		<xs:attribute name="Dimension" type="xs:positiveInteger" use="required">
			<xs:annotation>
				<xs:documentation>
			The dimension represents the number of float values in every sample.  Float samples would have one float per sample,
			thus a dimension of 1.  Position samples would have 3 floats per sample, or a dimension of 3.  The number of float
			values in the &lt;Values&gt; subelement should be exactly Count*Dimension.
			</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="MatrixSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="xs:positiveInteger" use="required" fixed="12">
						<xs:annotation>
							<xs:documentation>
						Matrix sample data should always have dimension 12.  The first 9 floats are the 3x3 scale/rotation matrix, and the last 3 are the translation.
						</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="PointSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="xs:positiveInteger" use="required" fixed="3">
						<xs:annotation>
							<xs:documentation>
							Position sample data has dimension 3 - the X,Y,Z values of each sample.
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ColorSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="either3or4" use="required">
						<xs:annotation>
							<xs:documentation>
							Color sample data has dimension 3 or 4 - the R,G,B, or R,G,B,A values of each sample.
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="RotationSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="xs:positiveInteger" use="required" fixed="4">
						<xs:annotation>
							<xs:documentation>
						Rotation sample data should always have dimension 4, giving a rotation value in either Quaternion or AngleAxis format as described in SceneInfo.
						</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="ScaleSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="xs:positiveInteger" use="required" fixed="7">
						<xs:annotation>
							<xs:documentation>
							Scale sample data has dimension 7.  Each ScaleValue is represented by 3 scale factors, followed by a four-float orientation for that scale
							(given in either Quaternion or AngleAxis format as described in SceneInfo).
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="FloatSample">
		<xs:complexType>
			<xs:complexContent>
				<xs:restriction base="SampleData">
					<xs:sequence>
						<xs:choice>
							<xs:element name="Times" type="IntList"/>
							<xs:element name="Start_Interval" type="Int2"/>
						</xs:choice>
						<xs:element name="Values" type="FloatList"/>
					</xs:sequence>
					<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
					<xs:attribute name="Dimension" type="xs:positiveInteger" use="required" fixed="1">
						<xs:annotation>
							<xs:documentation>
							Float sample data has dimension 1.
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:restriction>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="Light">
		<xs:complexType>
			<xs:sequence minOccurs="0">
				<xs:element name="Color" type="AnimatableColor"/>
				<xs:element name="Multiplier" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="AspectRatio" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="Start" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="End" type="AnimatableFloat" minOccurs="0"/>
				<xs:element name="FallOff" type="AnimatableFloat" minOccurs="0"/>
			</xs:sequence>
			<xs:attribute name="TargetID" type="xs:positiveInteger"/>
			<xs:attribute name="Type" type="LightType" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="Modifiers">
		<xs:complexType>
			<xs:annotation>
				<xs:documentation>
				This section is unfinished.  The subelements below may be subject to significant revision.
				</xs:documentation>
			</xs:annotation>
			<xs:sequence>
				<xs:element name="Modifier" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Skin" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Bone" maxOccurs="unbounded">
											<xs:complexType>
												<xs:attribute name="BoneID" type="xs:nonNegativeInteger" use="required"/>
												<xs:attribute name="Weight" type="xs:float" use="optional" default="0.0"/>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
									<xs:attribute name="Type" type="SkinType" use="required"/>
									<xs:attribute name="VertexID" type="xs:nonNegativeInteger" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="SkinType" type="xs:string" use="optional"/>
						<xs:attribute name="IsSkin" type="xs:boolean" use="required"/>
						<xs:attribute name="modName" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="Count" type="xs:positiveInteger" use="required"/>
		</xs:complexType>
	</xs:element>
</xs:schema>
