//-----------------------------------------------------------------------------
// ---------------------
// File ....: comsrv.idl
// ---------------------
// Author...: Gus J Grubba
// Date ....: October 1998
//
//-----------------------------------------------------------------------------

interface IMaxBitmap;
interface IMaxBitmapInfo;

//max version include
#include "buildver.h"
#include "maxversion.h"

//standard imports
import "oaidl.idl";
import "ocidl.idl";


//extra imports
//JH 10/30/02 deccoupling from this
//import "FileLink.idl";



//test interface for measuring speed of standard marshaller
[
	object,
	uuid(6EC5990B-7E22-4817-A76D-EDFE86B94237),

	helpstring("ITestMarshalSpeed Interface"),
	pointer_default(unique)
]
interface ITestMarshalSpeed : IUnknown
{
	[helpstring("method getData")] HRESULT getData([out] long *pcMax, [out, size_is(,*pcMax)] unsigned char **pprgs);
};


[
	uuid(4AD72E61-5A4B-11D2-91CB-0060081C257E),
	version(1.0),
	helpstring("3D Studio MAX Interface 1.0 Type Library")
]
library COMSRVLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	typedef
	[
		uuid(8A3AD521-69EF-11d2-91CD-0060081C257E),
		helpstring("3D Studio MAX G Buffer Flags (Image Definition)"),
	]
	enum MAXGBufferFlags
	{
		[helpstring("No Special Channels")]	CHAN_NONE			= 0x0000,
		[helpstring("Z Buffer")]			CHAN_Z				= 0x0001,
		[helpstring("Material ID")]			CHAN_MTL_ID			= 0x0002,
		[helpstring("Node ID")]				CHAN_NODE_ID		= 0x0004,
		[helpstring("UV Coordinates")]		CHAN_UV				= 0x0008,
		[helpstring("Normals")]				CHAN_NORMAL			= 0x0010,
		[helpstring("Real Pixels")]			CHAN_REALPIX		= 0x0020,
		[helpstring("Coverage")]			CHAN_COVERAGE		= 0x0040,
		[helpstring("Back Ground RGB")]		CHAN_BG				= 0x0080,
		[helpstring("Node Render Index")]	CHAN_NODE_RENDER_ID	= 0x0100,
	} MAXGBufferFlags;
	typedef
	[
		uuid(DBCE7FE1-69A2-11d2-91CD-0060081C257E),
		helpstring("3D Studio MAX Channel Types (Image Request)"),
	]
	enum MAXchannelTypes
	{
		[helpstring("RGB 24 Bits")]					TYPE_RGB24		= 0x0001,
		[helpstring("RGB 48 Bits")]					TYPE_RGB48		= 0x0002,
		[helpstring("RGBA 32 Bits")]				TYPE_RGBA32		= 0x0003,
		[helpstring("RGBA 64 Bits")]				TYPE_RGBA64		= 0x0004,
		[helpstring("BGR 24 Bits")]					TYPE_BGR24		= 0x0005,
		[helpstring("BGR 48 Bits")]					TYPE_BGR48		= 0x0006,
		[helpstring("BGRA 32 Bits")]				TYPE_BGRA32		= 0x0007,
		[helpstring("BGRA 64 Bits")]				TYPE_BGRA64		= 0x0008,
		[helpstring("Z 32 Bits Float")]				TYPE_Z32		= 0x0009,
		[helpstring("Material ID 8 Bits")]			TYPE_MTLID8		= 0x000A,
		[helpstring("Node ID 16 Bits")]				TYPE_NODEID16	= 0x000B,
		[helpstring("UV 64 Bits Point2")]			TYPE_UV64		= 0x000C,
		[helpstring("Normals 32 Bits Float")]		TYPE_NORMAL32	= 0x000D,
		[helpstring("Real Pixels (Dep)")]			TYPE_REALPIXDEP	= 0x000E,
		[helpstring("Coverage 8 Bits")]				TYPE_COVERAGE8	= 0x000F,
		[helpstring("Back Ground RGB 24 Bits")]		TYPE_BGRGB24	= 0x0010,
		[helpstring("Node Render Index 16 Bits")]	TYPE_NODEIDX16	= 0x0011
	} MAXchannelTypes;
	[
		object,
		uuid(4AD72E6D-5A4B-11D2-91CB-0060081C257E),
		dual,
		helpstring("3D Studio MAX Interface"),
		pointer_default(unique)
	]
	interface IMaxRenderer : IDispatch
	{
		[propget, id(1),  helpstring("AnimationStart")]
			HRESULT AnimationStart		([out, retval] float *pVal);
		[propput, id(1),  helpstring("AnimationStart")]
			HRESULT AnimationStart		([in] float newVal);
		[propget, id(2),  helpstring("AnimationEnd")]
			HRESULT AnimationEnd		([out, retval] float *pVal);
		[propput, id(2),  helpstring("AnimationEnd")]
			HRESULT AnimationEnd		([in] float newVal);
		[propget, id(4),  helpstring("RenderFieldRender")]
			HRESULT RenderFieldRender	([out, retval] BOOL *pVal);
		[propput, id(4),  helpstring("RenderFieldRender")]
			HRESULT RenderFieldRender	([in] BOOL newVal);
		[propget, id(5),  helpstring("RenderColorCheck")]
			HRESULT RenderColorCheck	([out, retval] BOOL *pVal);
		[propput, id(5),  helpstring("RenderColorCheck")]
			HRESULT RenderColorCheck	([in] BOOL newVal);
		[propget, id(6),  helpstring("RenderSuperBlack")]
			HRESULT RenderSuperBlack	([out, retval] BOOL *pVal);
		[propput, id(6),  helpstring("RenderSuperBlack")]
			HRESULT RenderSuperBlack	([in] BOOL newVal);
		[propget, id(7),  helpstring("RenderHidden")]
			HRESULT RenderHidden		([out, retval] BOOL *pVal);
		[propput, id(7),  helpstring("RenderHidden")]
			HRESULT RenderHidden		([in] BOOL newVal);
		[propget, id(8),  helpstring("RenderForceTwoSide")]
			HRESULT RenderForceTwoSide	([out, retval] BOOL *pVal);
		[propput, id(8),  helpstring("RenderForceTwoSide")]
			HRESULT RenderForceTwoSide	([in] BOOL newVal);
		[propget, id(9),  helpstring("RenderAtmosphere")]
			HRESULT RenderAtmosphere	([out, retval] BOOL *pVal);
		[propput, id(9),  helpstring("RenderAtmosphere")]
			HRESULT RenderAtmosphere	([in] BOOL newVal);
		[propget, id(10), helpstring("RenderFieldOrder")]
			HRESULT RenderFieldOrder	([out, retval] long *pVal);
		[propput, id(10), helpstring("RenderFieldOrder")]
			HRESULT RenderFieldOrder	([in] long newVal);
		[id(11), helpstring("Load a MAX Scene")]
			HRESULT LoadScene				([in] BSTR SceneName);
		[id(12), helpstring("Save a MAX Scene")]
			HRESULT SaveScene				([in] BSTR SceneName);
		[id(13), helpstring("Import File")]
			HRESULT ImportFile				([in] BSTR FileName);
		[id(14), helpstring("Enumerate Cameras")]
			HRESULT EnumCameras				(void);
		[id(15), helpstring("Render a Frame")]
			HRESULT RenderFrame				([in] float Time, [in] float Duration);
		[id(16), helpstring("Open Renderer with given Camera Name and Bitmap description")]
			HRESULT OpenRenderer			([in] BSTR CameraName, [in] IMaxBitmapInfo *pBif, [in] BOOL region);
		[id(17), helpstring("Close Renderer")]
			HRESULT CloseRenderer			(void);
		[id(18), helpstring("Cancel Renderer")]
			HRESULT CancelRenderer			(void);
		[id(19), helpstring("Defines Region for Render Region")]
			HRESULT SetRegion				([in] short x,[in] short y,[in] short w,[in] short h);
		[id(20), helpstring("Get a line from the rendered image")]
			HRESULT GetLine					([in] MAXchannelTypes type, [in] long line, [in] BOOL linear, [out, retval] SAFEARRAY(unsigned char) *psa);
		[id(21),helpstring("Get a scaled line for preview")]
			HRESULT GetPreviewLine			([in] long line, [in] long width, [out, retval] SAFEARRAY(unsigned char) *psa);
		[id(22),helpstring("Executes a MAXScript string")]
			HRESULT ExecuteMAXScriptString	([in] BSTR String);
		[id(23),helpstring("Executes a MAXScript file")]
			HRESULT ExecuteMAXScriptFile	([in] BSTR Filename);
	};
	[
		object,
		uuid(4AD72E6F-5A4B-11D2-91CB-0060081C257E),
		dual,
		helpstring("3D Studio MAX Interface Events"),
		pointer_default(unique)
	]
	interface _IMaxRendererEvents : IDispatch
	{
		[id(1), helpstring("Issued for every camera found in the scene")]
			HRESULT OnEnumCameras	([in] BSTR CameraName);
		[id(2), helpstring("Issued while rendering to inform render progress")]
			HRESULT OnRenderProgress([in] long Done,[in] long Total);
		[id(3), helpstring("Issued while rendering to inform render status")]
			HRESULT OnRenderMessage	([in] BSTR Message);
		[id(4), helpstring("Issued when render is complete")]
			HRESULT OnRenderDone	();
	};
	[
		object,
		uuid(D888A161-6543-11D2-91CC-0060081C257E),
		dual,
		helpstring("3D Studio MAX IMaxBitmapInfo Interface"),
		pointer_default(unique)
	]
	interface IMaxBitmapInfo : IDispatch
	{
		[propget, id(1), helpstring("Width")]			HRESULT Width		([out, retval] short *pVal);
		[propput, id(1), helpstring("Width")]			HRESULT Width		([in] short newVal);
		[propget, id(2), helpstring("Height")]			HRESULT Height		([out, retval] short *pVal);
		[propput, id(2), helpstring("Height")]			HRESULT Height		([in] short newVal);
		[propget, id(3), helpstring("Process Gamma")]	HRESULT ProcessGamma([out, retval] BOOL *pVal);
		[propput, id(3), helpstring("Process Gamma")]	HRESULT ProcessGamma([in] BOOL newVal);
		[propget, id(4), helpstring("Gamma")]			HRESULT Gamma		([out, retval] float *pVal);
		[propput, id(4), helpstring("Gamma")]			HRESULT Gamma		([in] float newVal);
		[propget, id(5), helpstring("Aspect")]			HRESULT Aspect		([out, retval] float *pVal);
		[propput, id(5), helpstring("Aspect")]			HRESULT Aspect		([in] float newVal);
		[propget, id(6), helpstring("Channels")]		HRESULT Channels	([out, retval] MAXGBufferFlags *pVal);
		[propput, id(6), helpstring("Channels")]		HRESULT Channels	([in] MAXGBufferFlags newVal);
	};



	[
		uuid(4AD72E6E-5A4B-11D2-91CB-0060081C257E),
		helpstring("MaxRenderer Class")
	]
	coclass MaxRenderer
	{
		[default] interface IMaxRenderer;
		[default, source] dispinterface _IMaxRendererEvents;
	};
	[
		uuid(D888A162-6543-11D2-91CC-0060081C257E),
		helpstring("MaxBitmapInfo Class")
	]
	coclass MaxBitmapInfo
	{
		[default] interface IMaxBitmapInfo;
	};


	interface IMaxApp;
	interface IMaxDocument;
	interface IMaxMaterialCollection;
	interface IMaxMaterial;
	interface IMaxMaterialCollectionEvents;


	[
		object,
		uuid(024665AA-36F2-4818-8B39-9E59DC09F93C),
		dual,
		helpstring("IMaxMaterial Interface"),
		pointer_default(unique)
	]
	interface IMaxMaterial : IDispatch
	{
		[id(1), helpstring("method loadXML")] HRESULT loadXML([in]IUnknown *pUnk);
		[id(2), helpstring("method assignSelected")] HRESULT assignSelected();
		[id(3), helpstring("method getDynPropManagers")] HRESULT getDynPropManagers([in] VARIANT *pObjUnkArray, [out] VARIANT *pDynUnkArray);
		[propget, id(4), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
		[propput, id(4), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
		[propget, id(5), helpstring("property ThumbnailFile")] HRESULT ThumbnailFile([out, retval] BSTR *pVal);
		[propget, id(6), helpstring("property ID")] HRESULT ID([out, retval] GUID *pVal);
		[id(7), helpstring("method getThumbnailBytes")] HRESULT getThumbnailBytes([in] int sz, [out, retval]SAFEARRAY(unsigned char) *psa);
		[id(8), helpstring("method OnDrop")] HRESULT OnDrop([in] SHORT nFlag, [in] DWORD_PTR hWnd, [in] DWORD point, [in] DWORD dwKeyState);
		[id(9), helpstring("method BeginEdit")] HRESULT BeginEdit([in] VARIANT_BOOL bForceShow);
		[id(10), helpstring("method EndEdit")] HRESULT EndEdit(void);
		[id(11), helpstring("method NextThumbnailFrame")] HRESULT NextThumbnailFrame([out,retval] BSTR* filename);
		[propget, id(12), helpstring("property DiffuseColor")] HRESULT DiffuseColor([out, retval] OLE_COLOR* pVal);
		[propput, id(12), helpstring("property DiffuseColor")] HRESULT DiffuseColor([in] OLE_COLOR newVal);
		[propget, id(13), helpstring("property DiffuseMapAmount")] HRESULT DiffuseMapAmount([out, retval] FLOAT* pVal);
		[propput, id(13), helpstring("property DiffuseMapAmount")] HRESULT DiffuseMapAmount([in] FLOAT newVal);
		[propget, id(14), helpstring("property Shininess")] HRESULT Shininess([out, retval] FLOAT* pVal);
		[propput, id(14), helpstring("property Shininess")] HRESULT Shininess([in] FLOAT newVal);
		[propget, id(15), helpstring("property Transparency")] HRESULT Transparency([out, retval] FLOAT* pVal);
		[propput, id(15), helpstring("property Transparency")] HRESULT Transparency([in] FLOAT newVal);
		[propget, id(16), helpstring("property IdxRefraction")] HRESULT IdxRefraction([out, retval] FLOAT* pVal);
		[propput, id(16), helpstring("property IdxRefraction")] HRESULT IdxRefraction([in] FLOAT newVal);
		[propget, id(17), helpstring("property Luminance")] HRESULT Luminance([out, retval] FLOAT* pVal);
		[propput, id(17), helpstring("property Luminance")] HRESULT Luminance([in] FLOAT newVal);
		[propget, id(18), helpstring("property TwoSided")] HRESULT TwoSided([out, retval] VARIANT_BOOL* pVal);
		[propput, id(18), helpstring("property TwoSided")] HRESULT TwoSided([in] VARIANT_BOOL newVal);
		[id(19), helpstring("method DoColorPicker")] HRESULT DoColorPicker(void);
		[id(20), helpstring("method InScene")] HRESULT InScene([out,retval] VARIANT_BOOL* res);
		[id(21), helpstring("method IsReferenced")] HRESULT IsReferenced([out,retval] VARIANT_BOOL* res);
		[id(22), helpstring("method utilExecute")] HRESULT utilExecute([in] SHORT command, VARIANT arg1);
		[id(23), helpstring("method selectNodes")] HRESULT selectNodes(void);
		[id(24), helpstring("method clone")] HRESULT clone([out,retval] IMaxMaterial ** ppNew);
		[id(25), helpstring("method saveXML")] HRESULT saveXML([in] IUnknown* pUnk, [in]VARIANT_BOOL noPrompts);
		[id(26), helpstring("method CanAssignSelected")] HRESULT CanAssignSelected([out] VARIANT_BOOL* vResult);
		[id(27), helpstring("method selectFace")] HRESULT selectFace([in] USHORT idxSelection);
		[id(28), helpstring("method getFaceSelectionNames")] HRESULT getFaceSelectionNames([out] VARIANT* vFaceSelNames);
	};

	[
		object,
		uuid(318E168D-26DF-496e-AE38-73AC258B1524),
		helpstring("IMaxMaterialCollectionEvents Interface"),
		pointer_default(unique)
	]
	interface IMaxMaterialCollectionEvents : IUnknown
	{
	//declaring this as a custom interface since we don't support late-bound clients
	//could also be a pure dispinterface, but should not be dual (See Don Box, "Effective COM" item 12)
		[helpstring("method OnMaterialAssigned")] HRESULT OnMaterialAssigned([in] IMaxMaterialCollection *pMtlClxn, [in]IMaxMaterial *pMtl);
		[helpstring("method OnMaterialRemoved")] HRESULT OnMaterialRemoved([in]IMaxMaterialCollection* pMtlClxn, [in]IMaxMaterial *pMtl);
		[helpstring("method OnMaterialUnAssigned")] HRESULT OnMaterialUnAssigned([in] IMaxMaterialCollection* pMtlClxn, [in] IMaxMaterial * pMtl);
		[helpstring("method OnMaterialChanged")] HRESULT OnMaterialChanged([in] IMaxMaterialCollection* pMtlClxn, [in] IMaxMaterial * pMtl);
		[helpstring("method OnSaveScratchMaterials")] HRESULT OnSaveScratchMaterials([in] IMaxMaterialCollection* pMtlClxn, [in] IUnknown* pXMLNode);
	};
	[
		object,
		uuid(35F2F211-0DD8-4BDD-8EFF-540B072BF9DE),
		dual,
		helpstring("IMaxMaterialCollection Interface"),
		pointer_default(unique)
	]
	interface IMaxMaterialCollection : IDispatch
	{
		[id(1), helpstring("method createNew")] HRESULT createNew([out, retval] IMaxMaterial **ppMtl);
		[propget, id(2), helpstring("property count")] HRESULT count([out, retval] short *pVal);
		[id(3), helpstring("method getMaterial")] HRESULT getMaterial([in] int which, [out, retval] IMaxMaterial **ppMtl);
		[id(4), helpstring("method FindItem")] HRESULT FindItem([in] GUID id, [out, retval] IMaxMaterial **ppMtl);
		[id(5), helpstring("method emptyTrash")] HRESULT emptyTrash(void);
		[id(6), helpstring("method FindItemKey")] HRESULT FindItemKey([in] DWORD_PTR key, [out,retval] IMaxMaterial ** ppMtl);
		[id(7), helpstring("method AddPersistence")] HRESULT AddPersistence([in] IMaxMaterial * pMtl);
		[id(8), helpstring("method RemovePersistence")] HRESULT RemovePersistence([in] IMaxMaterial * pMtl);
		[id(9), helpstring("method createFromMaxID")] HRESULT createFromMaxID([in] VARIANT partA, [in] VARIANT partB, [out,retval] IMaxMaterial ** ppNew);
		[id(10), helpstring("method IsSelectionValid")] HRESULT IsSelectionValid([out] VARIANT_BOOL* vRes);
	};
	[
		object,
		uuid(234C4633-A0A1-4052-BE4A-B3426DFF7A00),
		dual,
		helpstring("IMaxDocument Interface"),
		pointer_default(unique)
	]
	interface IMaxDocument : IDispatch
	{
		[id(1), helpstring("method get_Materials")] HRESULT get_Materials([out, retval] IMaxMaterialCollection **ppMtls);
		[id(2), helpstring("method get_FileLinkDocument")] HRESULT get_FileLinkDocument([out, retval] IUnknown **ppLinkDocUnk);
		[id(3), helpstring("method GetApplication")] HRESULT GetApplication([out,retval] IMaxApp ** ppApp);
		[id(4), helpstring("method Show")] HRESULT Show(void);
	};
	[
		object,
		uuid(87435B20-4571-41B0-91D8-536062205E54),
		dual,
		helpstring("IMaxApp Interface"),
		pointer_default(unique)
	]
	interface IMaxApp : IDispatch
	{
		[id(1), helpstring("method get_ActiveDocument")] HRESULT get_ActiveDocument([out, retval]IMaxDocument **ppDoc);

		// The following is a stop-gap method to gain access to the older IMaxRenderInterface
		// Once the functionality of this interface is redistributed to interfaces of the OM,
		// this method will be deprecated (perhaps). 
//		[id(2), helpstring("method get_LegacyRenderInterface")] HRESULT get_LegacyRenderInterface([out, retval]IMaxRenderer** ppRender);
		[propget, id(2), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
		[propput, id(2), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
		[id(3), helpstring("method put_ActiveDocument")] HRESULT put_ActiveDocument(IMaxDocument * pDoc);
	};


	//A single material
	[
		uuid(CA37DBC7-EE5F-41CD-A864-D2CF6DD37523),
		helpstring("MaxMaterial Class"),
		noncreatable
	]
	coclass MaxMaterial
	{
		[default] interface IMaxMaterial;
		[default, source] interface IMaxMaterialCollectionEvents;
	};

	//The collection of materials in the currently loaded scene
	[
		uuid(D689F6DD-5B11-4900-9CDA-30EAFEA78123),
		helpstring("MaxMaterialCollection Class"),
		noncreatable
	]
	coclass MaxMaterialCollection
	{
		[default] interface IMaxMaterialCollection;
		[default, source] interface IMaxMaterialCollectionEvents;
	};

	//Max document object
	//Represents the currently loaded scene
	[
#ifdef EXTENDED_OBJECT_MODEL
    #ifndef RENDER_VER
        //uuid(900AA3F2-160B-4faf-8DEC-ABA197646D6A), // Athens VIZ2006
        uuid(470A49F5-7DF9-47c8-9E8A-E6C02E685AD1), // Chicago, VIZ 2007
    #else
	    #ifndef RENDER_VER_ABS
            #ifndef RENDER_VER_CIV3D
        //		uuid(F40F75D9-7384-44F1-8AC1-933D8CBEA728), // Kahn
        //      uuid(8309D779-B171-4f84-B17C-5C43E8ECC84B), // Ando
	    	    uuid(82B3A166-D873-4d52-99CD-BCCBAB47E766), // Holden
            #else
        //      uuid(DB201491-3CEB-4f6c-802B-352198EC9D96), // Telford
                uuid(D0AC7709-E20E-443d-B0D1-939873B1F2C0), // Brunel
            #endif
	    #else // RENDER_VER_ABS defined
    //		uuid(BEF38204-C152-4dec-A13B-1A3401439CF8), // Sullivan
    //		uuid(69A0840D-278F-4234-A5CC-36669BDB2CC4), // Edison
            uuid(6DB0F75F-2C5A-417f-B148-8EA4290B6650), // Bell
	    #endif
    #endif
#else
		//Temporary, if we hit this, something is wrong
		//TODO make sure that the minimal types are expose
		//by MAX and VIZ
		uuid(82B3A166-D873-4d52-99CD-BCCBAB47E766),
#endif
		helpstring("MaxDocument Class")
	]
	coclass MaxDocument
	{
		[default] interface IMaxDocument;
	};
	[
    #ifndef RENDER_VER
        uuid(863FC71A-872B-45b4-80D7-2278D7A8B43F), // Athens VIZ2006 
    #else
		uuid(8A9DCB83-B385-41D0-B8E8-05A1AD47E72A),
	#endif
		helpstring("MaxApp Class"),
		appobject,
		noncreatable
	]
	coclass MaxApp
	{
		[default] interface IMaxApp;
	};
	[
		uuid(93B00F73-A90D-4A4B-9F4D-B7328892D624),
		helpstring("TestMarshalSpeed Class")
	]
	coclass TestMarshalSpeed
	{
		[default] interface ITestMarshalSpeed;
	};

	//
	[
		object,
		uuid(DBEB10DF-A6EE-4cd1-B7EC-8F712071D2A1),
		helpstring("IMaxSerializeXml Interface"),
		pointer_default(unique)
	]
	interface IMaxSerializeXml : IUnknown
	{
		[helpstring("method QueryXmlSupport")] HRESULT QueryXmlSupport( [in, out] BSTR * pbstrLog, [in]VARIANT_BOOL fullReport);
		[helpstring("method SerializeXml")] HRESULT SerializeXml([in] IUnknown* pUnk);
		[helpstring("method LoadXml")] HRESULT LoadXml([in] IUnknown* pUnk);
	}
};

//-- EOF: comsrv.idl ----------------------------------------------------------
